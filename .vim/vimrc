filetype plugin on  " Automatically detect file types.
set nocompatible  " We don't want vi compatibility.
 
" Add recently accessed projects menu (project plugin)
set viminfo^=!
 
" Minibuffer Explorer Settings
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

" alt+n or alt+p to navigate between entries in QuickFix
map <silent> <m-p> :cp <cr>
map <silent> <m-n> :cn <cr>
 
" Change which file opens after executing :Rails command
let g:rails_default_file='config/database.yml'
 
syntax enable

set cf  " Enable error files & error jumping.
set clipboard+=unnamed  " Yanks go on clipboard instead.
set history=256  " Number of things to remember in history.
set autowrite  " Writes on make/shell commands
set ruler  " Ruler on
set showcmd " display incomplete commands
set hlsearch " switch on highlighting the last used search pattern
set nu  " Line numbers on
set wrap  " Line wrapping off
set linebreak
set textwidth=0
set timeoutlen=250  " Time to wait after ESC (default causes an annoying delay)
" Textmate scheme colors clone
colorscheme vibrantink " Uncomment this to set a default theme

" Remap leader (finally I will try it)
let mapleader = ","

" Formatting (some of these are for coding in C and C++)
set ts=2  " Tabs are 2 spaces
set bs=2  " Backspace over everything in insert mode
set shiftwidth=2  " Tabs under smart indent
set nocp incsearch
set cinoptions=:0,p0,t0
set cinwords=if,else,while,do,for,switch,case
set formatoptions=tcqr
set cindent
set autoindent
set smarttab
set expandtab
 
" Visual
set showmatch  " Show matching brackets.
set mat=5  " Bracket blinking.
"set list
set cursorline

set noerrorbells  " No noise.
set laststatus=2  " Always show status line.
 
" gvim specific
set mousehide  " Hide mouse after chars typed
set mouse=a  " Mouse in all modes
set guifont=Monaco\ 10
set guioptions+=l

" Backups & Files
set backup                     " Enable creation of backup file.
set backupdir=~/.vim/backups " Where backups will go.
set directory=~/.vim/tmp     " Where temporary files will go.

" Default browser
command -bar -nargs=1 OpenURL :!firefox <args> 2>&1 >/dev/null &

" Set minimum window size
" set wmh=0
" Map keys + and - to maximize/minimize window
if bufwinnr(1)
  map + <C-W>_
  map - <C-W>=
endif

" Follow help links with enter
nmap <buffer> <CR> <C-]>
" " Back to previous help page with backspace
nmap <buffer> <BS> <C-T>

" Convenient command to see the difference between the current buffer and
" the file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif
" Commands to add suppport for ruby (only do this if support autocommands)
if has("autocmd")
  autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
  autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
  autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
  map <leader>mr <ESC>:rubyf %<CR>
end

au FileType haskell,vhdl,ada let b:comment_leader = '-- '
au FileType vim let b:comment_leader = '" '
au FileType c,cpp,java let b:comment_leader = '// '
au FileType ruby,sh,make let b:comment_leader = '# '
au FileType tex let b:comment_leader = '% '

" Launch NERDTree at the beginning
" autocmd VimEnter * exe 'NERDTree' | wincmd l

" Load NERD_tree
map <F9> :NERDTreeToggle<CR>

" NERDCommenter
let g:NERDCreateDefaultMappings = 0
let g:NERDSpaceDelims = 1
nmap \\ <Plug>NERDCommenterInvert
xmap \\ <Plug>NERDCommenterInvert

" Fuzzy Finder modified by Jamis Buck
let g:fuzzy_ignore = "*.log,*.jpg,*.png,*.gif,*.swp"
let g:fuzzy_matching_limit = 70
" map <leader>t :FuzzyFinderTextMate<CR>
map <leader>b :FufBuffer<CR>
map <leader>f :FufFile<CR>
